fun rec iter(f, l) {
    match l {
        [] -> (),
        hd :: tl -> {
            f(hd);
            iter(f, tl)
        }
    }
}

fun reverse(l) {
    fun rec inner(l, acc) {
        match l {
            [] -> acc,
            hd :: tl -> inner(tl, hd :: acc)
        }
    }
    inner(l, [])
}

fun map(f, l) {
    fun rec inner(l, acc) {
        match l {
            [] -> reverse(acc),
            h :: t -> inner(t, f(h) :: acc)
        }
    }
    inner(l, [])
}

fun first_two(l) {
    match l {
        [] -> None,
        [_] -> None,
        [_, _] -> None,
        one :: two :: _ -> Some(one, two)
    }
}

fun main() {
    let l = ["I", "love", "you"];
    let x = first_two(l);
    let l = map(fun(s) { s ^ "!" }, l);
    iter(fun(s) { print_endline(s) }, l)
}