# function
fun ok_or default o = match o {
    some o' -> o',
    none -> default
};

fun flip t = match t {
    (x, y) -> (y, x)
};

fun flip2 (x, y) = (y, x);

# block
fun flip3 (x, y) = {
    let x' = y;
    let y' = x;
    (x', y')
};

# closure
fun flip4 = (fun (x, y) -> (y, x));

# recursive
fun rec count list total = match list {
    [] -> total,
    _ :: tl -> count tl (int.add total 1)
};